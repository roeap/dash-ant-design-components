name: Publish Python üêç distributions üì¶ to PyPI

on:
  push:
    tags: ["v*"]

jobs:
  validate-release-tag:
    name: Validate git tag
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: compare git tag with cargo metadata
        run: |
          PUSHED_TAG=${GITHUB_REF##*/}
          CURR_VER=$( grep version pyproject.toml | head -n 1 | awk '{print $3}' | tr -d '"' )
          if [[ "${PUSHED_TAG}" != "v${CURR_VER}" ]]; then
            echo "pyproject metadata has version set to ${CURR_VER}, but got pushed tag ${PUSHED_TAG}."
            exit 1
          fi

  build-n-publish:
    name: Build and publish Python üêç distributions üì¶ to PyPI
    needs: validate-release-tag
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: extractions/setup-just@v1

      - name: Use Node.js 16
        uses: actions/setup-node@v1
        id: setup-node
        with:
          node-version: 16.x

      - name: Setup Python
        uses: actions/setup-python@v2
        id: setup-python
        with:
          python-version: ${{ matrix.python-version }}

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: Load cached venv
        id: cached-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: venv-${{ runner.os }}-${{ steps.setup-node.outputs.node-version }}-${{ hashFiles('yarn.lock') }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Install Python dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install Node dependencies
        if: steps.cached-node-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Lint source
        run: just lint

      - name: Run tests
        run: just test

      - name: Build package
        run: just package

      - name: Publish distribution üì¶ to PyPI
        run: |
          pip install twine
          twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
